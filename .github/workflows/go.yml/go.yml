name: Go

on: [ push, pull_request ]

jobs:
  Workflow:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: products        
          POSTGRES_PASSWORD: techuser
          POSTGRES_USER: techuser
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5    
    steps:
    - uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.17.x
        
    - name: Lint
      #if: always()
      continue-on-error: true
      run: $GITHUB_WORKSPACE/lint.sh
#     run: go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.43.0 && export MY_PATH=$(echo $GITHUB_REF | awk -F/ '{print $NF}') && cd $MY_PATH  && golangci-lint run -c $GITHUB_WORKSPACE/.golangci.yml -v
    - name: Test
      #if: always()
      continue-on-error: true
      run : $GITHUB_WORKSPACE/test.sh
#      run:  export MY_PATH=$(echo $GITHUB_REF | awk -F/ '{print $NF}') && cd $MY_PATH  && go test .
    - name: Build app
      #if: always()
      run : $GITHUB_WORKSPACE/build.sh    
#      run: export MY_PATH=$(echo $GITHUB_REF | awk -F/ '{print $NF}') && cd $MY_PATH  && go build .

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v3
      with:
        images: dm0610/products-api
    - name: Build image and push to Docker Hub
      uses: docker/build-push-action@v2
      with:
        # relative path to the place where source code with Dockerfile is located
        context: ./product_builder
        # Note: tags has to be all lower-case
        tags: ${{ steps.meta.outputs.tags }}
        # build on feature branches, push only on main branch
        push: true
